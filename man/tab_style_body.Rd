% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tab_style_body.R
\name{tab_style_body}
\alias{tab_style_body}
\title{Target cells in the table body and style accordingly}
\usage{
tab_style_body(
  data,
  style,
  columns = everything(),
  rows = everything(),
  values = NULL,
  pattern = NULL,
  fn = NULL,
  targets = "cell",
  extents = "body"
)
}
\arguments{
\item{data}{A table object that is created using the \code{\link[=gt]{gt()}} function.}

\item{style}{a vector of styles to use. The \code{\link[=cell_text]{cell_text()}}, \code{\link[=cell_fill]{cell_fill()}}, and
\code{\link[=cell_borders]{cell_borders()}} helper functions can be used here to more easily generate
valid styles. If using more than one helper function to define styles, all
calls must be enclosed in a \code{\link[=list]{list()}}. Custom CSS declarations can be used
for HTML output by including a \code{\link[=css]{css()}}-based statement as a list item.}

\item{columns}{Optional columns for constraining the targeting process.
Providing \code{\link[=everything]{everything()}} (the default) results in cells in all \code{columns}
being targeting (this can be limited by \code{rows} however). Can either be a
series of column names provided in \code{\link[=c]{c()}}, a vector of column indices, or a
helper function focused on selections. The select helper functions are:
\code{\link[=starts_with]{starts_with()}}, \code{\link[=ends_with]{ends_with()}}, \code{\link[=contains]{contains()}}, \code{\link[=matches]{matches()}}, \code{\link[=one_of]{one_of()}},
\code{\link[=num_range]{num_range()}}, and \code{\link[=everything]{everything()}}.}

\item{rows}{Optional rows for constraining the targeting process. Providing
\code{\link[=everything]{everything()}} (the default) results in all rows in \code{columns} being
targeted. Alternatively, we can supply a vector of row captions within
\code{\link[=c]{c()}}, a vector of row indices, or a helper function focused on selections.
The select helper functions are: \code{\link[=starts_with]{starts_with()}}, \code{\link[=ends_with]{ends_with()}},
\code{\link[=contains]{contains()}}, \code{\link[=matches]{matches()}}, \code{\link[=one_of]{one_of()}}, \code{\link[=num_range]{num_range()}}, and \code{\link[=everything]{everything()}}.
We can also use expressions to filter down to the rows we need (e.g.,
\verb{[colname_1] > 100 & [colname_2] < 50}).}

\item{values}{The specific value or values that should be targeted for
styling. If \code{pattern} is also supplied then \code{values} will be ignored.}

\item{pattern}{A regex pattern that can target solely those values in
\code{character}-based columns. If \code{values} is also supplied, \code{pattern} will
take precedence.}

\item{fn}{A supplied function that operates on each cell of each column
specified through \code{columns} and \code{rows}. The function should be fashioned
such that a single logical value is returned. If either of \code{values} or
\code{pattern} is also supplied, \code{fn} will take precedence.}

\item{targets}{A vector of styling target keywords to contain or expand the
target of each cell. By default, this is a vector just containing \code{"cell"}.
However, the keywords \code{"row"} and \code{"column"} may be used separately or in
combination to style the target cells' associated rows or columns.}

\item{extents}{A vector of locations to project styling. By default, this is
a vector just containing \code{"body"}, whereby styled rows or columns
(facilitated via inclusion of the \code{"row"} and \code{"column"} keywords in
\code{targets}) will not permeate into the stub. The additional keyword \code{"stub"}
may be used alone or in conjunction with \code{"body"} to project or expand the
styling into the stub.}
}
\value{
An object of class \code{gt_tbl}.
}
\description{
With the \code{tab_style_body()} function we can target cells though value, regex,
and custom matching rules and apply styles to them and their surrounding
context (i.e., styling an entire row or column wherein the match is found).
Just as with the general \code{\link[=tab_style]{tab_style()}} function, this function is focused on
the application of styles for HTML output only (as such, other output formats
will ignore all \code{tab_style()} calls).

With the collection of \verb{cell_*()} helper functions available in \strong{gt}, we
can modify:
\itemize{
\item the background color of the cell (\code{\link[=cell_fill]{cell_fill()}}: \code{color})
\item the cell's text color, font, and size (\code{\link[=cell_text]{cell_text()}}: \code{color}, \code{font},
\code{size})
\item the text style (\code{\link[=cell_text]{cell_text()}}: \code{style}), enabling the use of italics or
oblique text.
\item the text weight (\code{\link[=cell_text]{cell_text()}}: \code{weight}), allowing the use of thin to
bold text (the degree of choice is greater with variable fonts)
\item the alignment and indentation of text (\code{\link[=cell_text]{cell_text()}}: \code{align} and
\code{indent})
\item the cell borders (\code{\link[=cell_borders]{cell_borders()}})
}
}
\section{Examples}{


Use \code{exibble} to create a \strong{gt} table with a stub and row groups. This
contains an assortment of values that could potentially undergo some styling
via \code{tab_style_body()}.

\if{html}{\out{<div class="sourceCode r">}}\preformatted{gt_tbl <-
  exibble \%>\%
  gt(
    rowname_col = "row",
    groupname_col = "group"
  )
}\if{html}{\out{</div>}}

Cells in the table body can be styled through specification of literal values
in the \code{values} argument of \code{tab_style_body()}. It's okay to search for
numerical, character, or logical values across all columns. Let's target the
values \code{49.95} and \code{33.33} and style those cells with an orange fill.

\if{html}{\out{<div class="sourceCode r">}}\preformatted{gt_tbl \%>\%
  tab_style_body(
    style = cell_fill(color = "orange"),
    values = c(49.95, 33.33)
  )
}\if{html}{\out{</div>}}

\if{html}{\out{
<img src="https://raw.githubusercontent.com/rstudio/gt/master/images/man_tab_style_body_1.png" alt="This image of a table was generated from the first code example in the `tab_style_body()` help file." style="width:100\%;">
}}

Multiple styles can be combined in a \code{list}, here's an example of that using
the same cell targets:

\if{html}{\out{<div class="sourceCode r">}}\preformatted{gt_tbl \%>\%
  tab_style_body(
    style = list(
      cell_text(font = google_font("Inter"), color = "white"),
      cell_fill(color = "red"),
      cell_borders(
        sides = c("left", "right"),
        color = "steelblue",
        weight = px(4)
      )
    ),
    values = c(49.95, 33.33)
  )
}\if{html}{\out{</div>}}

\if{html}{\out{
<img src="https://raw.githubusercontent.com/rstudio/gt/master/images/man_tab_style_body_2.png" alt="This image of a table was generated from the second code example in the `tab_style_body()` help file." style="width:100\%;">
}}

You can opt to color entire rows or columns (or both, should you want to)
with those specific keywords in the \code{targets} argument. For the \code{49.95} value
we will style the entire row and with \code{33.33} the entire column will get the
same styling.

\if{html}{\out{<div class="sourceCode r">}}\preformatted{gt_tbl \%>\%
  tab_style_body(
    style = cell_fill(color = "lightblue"),
    values = 49.95,
    targets = "row"
  ) \%>\%
  tab_style_body(
    style = cell_fill(color = "lightblue"),
    values = 33.33,
    targets = "column"
  )
}\if{html}{\out{</div>}}

\if{html}{\out{
<img src="https://raw.githubusercontent.com/rstudio/gt/master/images/man_tab_style_body_3.png" alt="This image of a table was generated from the third code example in the `tab_style_body()` help file." style="width:100\%;">
}}

In a minor variation to the prior example, it's possible to extend the
styling to other locations, or, entirely project the styling elsewhere. This
is done with the \code{extents} argument. Valid keywords that can be included in
the vector are: \code{"body"} (the default) and \code{"stub"}. Let's take the previous
example and extend the styling of the row into the stub.

\if{html}{\out{<div class="sourceCode r">}}\preformatted{gt_tbl \%>\%
  tab_style_body(
    style = cell_fill(color = "lightblue"),
    values = 49.95,
    targets = "row",
    extents = c("body", "stub")
  ) \%>\%
  tab_style_body(
    style = cell_fill(color = "lightblue"),
    values = 33.33,
    targets = "column"
  )
}\if{html}{\out{</div>}}

\if{html}{\out{
<img src="https://raw.githubusercontent.com/rstudio/gt/master/images/man_tab_style_body_4.png" alt="This image of a table was generated from the fourth code example in the `tab_style_body()` help file." style="width:100\%;">
}}

We can also use the \code{pattern} argument to target cell values in
\code{character}-based columns. The \code{"fctr"} column is skipped because it is in
fact a factor-based column.

\if{html}{\out{<div class="sourceCode r">}}\preformatted{gt_tbl \%>\%
  tab_style_body(
    style = cell_fill(color = "green"),
    pattern = "ne|na"
  )
}\if{html}{\out{</div>}}

\if{html}{\out{
<img src="https://raw.githubusercontent.com/rstudio/gt/master/images/man_tab_style_body_5.png" alt="This image of a table was generated from the fifth code example in the `tab_style_body()` help file." style="width:100\%;">
}}

For the most flexibility in targeting, it's best to use the \code{fn} argument.
The function you give to \code{fn} will be invoked separately on all cells so the
\code{columns} argument of \code{tab_style_body()} might be useful to limit which cells
should be evaluated. For this next example, the supplied function should only
be used on numeric values and we can make sure of this by using \code{columns = where(is.numeric)}.

\if{html}{\out{<div class="sourceCode r">}}\preformatted{gt_tbl \%>\%
  tab_style_body(
    columns = where(is.numeric),
    style = cell_fill(color = "pink"),
    fn = function(x) x >= 0 && x < 50
  )
}\if{html}{\out{</div>}}

\if{html}{\out{
<img src="https://raw.githubusercontent.com/rstudio/gt/master/images/man_tab_style_body_6.png" alt="This image of a table was generated from the sixth code example in the `tab_style_body()` help file." style="width:100\%;">
}}
}

\section{Function ID}{

2-11
}

\seealso{
Other part creation/modification functions: 
\code{\link{tab_caption}()},
\code{\link{tab_footnote}()},
\code{\link{tab_header}()},
\code{\link{tab_info}()},
\code{\link{tab_options}()},
\code{\link{tab_row_group}()},
\code{\link{tab_source_note}()},
\code{\link{tab_spanner_delim}()},
\code{\link{tab_spanner}()},
\code{\link{tab_stub_indent}()},
\code{\link{tab_stubhead}()},
\code{\link{tab_style}()}
}
\concept{part creation/modification functions}
